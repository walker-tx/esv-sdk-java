/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PassageMeta {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonical")
    private Optional<String> canonical;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapter_start")
    private Optional<? extends List<Long>> chapterStart;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapter_end")
    private Optional<? extends List<Long>> chapterEnd;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prev_verse")
    private Optional<Long> prevVerse;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_verse")
    private Optional<Long> nextVerse;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prev_chapter")
    private Optional<? extends List<Long>> prevChapter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_chapter")
    private Optional<? extends List<Long>> nextChapter;

    @JsonCreator
    public PassageMeta(
            @JsonProperty("canonical") Optional<String> canonical,
            @JsonProperty("chapter_start") Optional<? extends List<Long>> chapterStart,
            @JsonProperty("chapter_end") Optional<? extends List<Long>> chapterEnd,
            @JsonProperty("prev_verse") Optional<Long> prevVerse,
            @JsonProperty("next_verse") Optional<Long> nextVerse,
            @JsonProperty("prev_chapter") Optional<? extends List<Long>> prevChapter,
            @JsonProperty("next_chapter") Optional<? extends List<Long>> nextChapter) {
        Utils.checkNotNull(canonical, "canonical");
        Utils.checkNotNull(chapterStart, "chapterStart");
        Utils.checkNotNull(chapterEnd, "chapterEnd");
        Utils.checkNotNull(prevVerse, "prevVerse");
        Utils.checkNotNull(nextVerse, "nextVerse");
        Utils.checkNotNull(prevChapter, "prevChapter");
        Utils.checkNotNull(nextChapter, "nextChapter");
        this.canonical = canonical;
        this.chapterStart = chapterStart;
        this.chapterEnd = chapterEnd;
        this.prevVerse = prevVerse;
        this.nextVerse = nextVerse;
        this.prevChapter = prevChapter;
        this.nextChapter = nextChapter;
    }
    
    public PassageMeta() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> canonical() {
        return canonical;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> chapterStart() {
        return (Optional<List<Long>>) chapterStart;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> chapterEnd() {
        return (Optional<List<Long>>) chapterEnd;
    }

    @JsonIgnore
    public Optional<Long> prevVerse() {
        return prevVerse;
    }

    @JsonIgnore
    public Optional<Long> nextVerse() {
        return nextVerse;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> prevChapter() {
        return (Optional<List<Long>>) prevChapter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> nextChapter() {
        return (Optional<List<Long>>) nextChapter;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PassageMeta withCanonical(String canonical) {
        Utils.checkNotNull(canonical, "canonical");
        this.canonical = Optional.ofNullable(canonical);
        return this;
    }

    public PassageMeta withCanonical(Optional<String> canonical) {
        Utils.checkNotNull(canonical, "canonical");
        this.canonical = canonical;
        return this;
    }

    public PassageMeta withChapterStart(List<Long> chapterStart) {
        Utils.checkNotNull(chapterStart, "chapterStart");
        this.chapterStart = Optional.ofNullable(chapterStart);
        return this;
    }

    public PassageMeta withChapterStart(Optional<? extends List<Long>> chapterStart) {
        Utils.checkNotNull(chapterStart, "chapterStart");
        this.chapterStart = chapterStart;
        return this;
    }

    public PassageMeta withChapterEnd(List<Long> chapterEnd) {
        Utils.checkNotNull(chapterEnd, "chapterEnd");
        this.chapterEnd = Optional.ofNullable(chapterEnd);
        return this;
    }

    public PassageMeta withChapterEnd(Optional<? extends List<Long>> chapterEnd) {
        Utils.checkNotNull(chapterEnd, "chapterEnd");
        this.chapterEnd = chapterEnd;
        return this;
    }

    public PassageMeta withPrevVerse(long prevVerse) {
        Utils.checkNotNull(prevVerse, "prevVerse");
        this.prevVerse = Optional.ofNullable(prevVerse);
        return this;
    }

    public PassageMeta withPrevVerse(Optional<Long> prevVerse) {
        Utils.checkNotNull(prevVerse, "prevVerse");
        this.prevVerse = prevVerse;
        return this;
    }

    public PassageMeta withNextVerse(long nextVerse) {
        Utils.checkNotNull(nextVerse, "nextVerse");
        this.nextVerse = Optional.ofNullable(nextVerse);
        return this;
    }

    public PassageMeta withNextVerse(Optional<Long> nextVerse) {
        Utils.checkNotNull(nextVerse, "nextVerse");
        this.nextVerse = nextVerse;
        return this;
    }

    public PassageMeta withPrevChapter(List<Long> prevChapter) {
        Utils.checkNotNull(prevChapter, "prevChapter");
        this.prevChapter = Optional.ofNullable(prevChapter);
        return this;
    }

    public PassageMeta withPrevChapter(Optional<? extends List<Long>> prevChapter) {
        Utils.checkNotNull(prevChapter, "prevChapter");
        this.prevChapter = prevChapter;
        return this;
    }

    public PassageMeta withNextChapter(List<Long> nextChapter) {
        Utils.checkNotNull(nextChapter, "nextChapter");
        this.nextChapter = Optional.ofNullable(nextChapter);
        return this;
    }

    public PassageMeta withNextChapter(Optional<? extends List<Long>> nextChapter) {
        Utils.checkNotNull(nextChapter, "nextChapter");
        this.nextChapter = nextChapter;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PassageMeta other = (PassageMeta) o;
        return 
            Objects.deepEquals(this.canonical, other.canonical) &&
            Objects.deepEquals(this.chapterStart, other.chapterStart) &&
            Objects.deepEquals(this.chapterEnd, other.chapterEnd) &&
            Objects.deepEquals(this.prevVerse, other.prevVerse) &&
            Objects.deepEquals(this.nextVerse, other.nextVerse) &&
            Objects.deepEquals(this.prevChapter, other.prevChapter) &&
            Objects.deepEquals(this.nextChapter, other.nextChapter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            canonical,
            chapterStart,
            chapterEnd,
            prevVerse,
            nextVerse,
            prevChapter,
            nextChapter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PassageMeta.class,
                "canonical", canonical,
                "chapterStart", chapterStart,
                "chapterEnd", chapterEnd,
                "prevVerse", prevVerse,
                "nextVerse", nextVerse,
                "prevChapter", prevChapter,
                "nextChapter", nextChapter);
    }
    
    public final static class Builder {
 
        private Optional<String> canonical = Optional.empty();
 
        private Optional<? extends List<Long>> chapterStart = Optional.empty();
 
        private Optional<? extends List<Long>> chapterEnd = Optional.empty();
 
        private Optional<Long> prevVerse = Optional.empty();
 
        private Optional<Long> nextVerse = Optional.empty();
 
        private Optional<? extends List<Long>> prevChapter = Optional.empty();
 
        private Optional<? extends List<Long>> nextChapter = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder canonical(String canonical) {
            Utils.checkNotNull(canonical, "canonical");
            this.canonical = Optional.ofNullable(canonical);
            return this;
        }

        public Builder canonical(Optional<String> canonical) {
            Utils.checkNotNull(canonical, "canonical");
            this.canonical = canonical;
            return this;
        }

        public Builder chapterStart(List<Long> chapterStart) {
            Utils.checkNotNull(chapterStart, "chapterStart");
            this.chapterStart = Optional.ofNullable(chapterStart);
            return this;
        }

        public Builder chapterStart(Optional<? extends List<Long>> chapterStart) {
            Utils.checkNotNull(chapterStart, "chapterStart");
            this.chapterStart = chapterStart;
            return this;
        }

        public Builder chapterEnd(List<Long> chapterEnd) {
            Utils.checkNotNull(chapterEnd, "chapterEnd");
            this.chapterEnd = Optional.ofNullable(chapterEnd);
            return this;
        }

        public Builder chapterEnd(Optional<? extends List<Long>> chapterEnd) {
            Utils.checkNotNull(chapterEnd, "chapterEnd");
            this.chapterEnd = chapterEnd;
            return this;
        }

        public Builder prevVerse(long prevVerse) {
            Utils.checkNotNull(prevVerse, "prevVerse");
            this.prevVerse = Optional.ofNullable(prevVerse);
            return this;
        }

        public Builder prevVerse(Optional<Long> prevVerse) {
            Utils.checkNotNull(prevVerse, "prevVerse");
            this.prevVerse = prevVerse;
            return this;
        }

        public Builder nextVerse(long nextVerse) {
            Utils.checkNotNull(nextVerse, "nextVerse");
            this.nextVerse = Optional.ofNullable(nextVerse);
            return this;
        }

        public Builder nextVerse(Optional<Long> nextVerse) {
            Utils.checkNotNull(nextVerse, "nextVerse");
            this.nextVerse = nextVerse;
            return this;
        }

        public Builder prevChapter(List<Long> prevChapter) {
            Utils.checkNotNull(prevChapter, "prevChapter");
            this.prevChapter = Optional.ofNullable(prevChapter);
            return this;
        }

        public Builder prevChapter(Optional<? extends List<Long>> prevChapter) {
            Utils.checkNotNull(prevChapter, "prevChapter");
            this.prevChapter = prevChapter;
            return this;
        }

        public Builder nextChapter(List<Long> nextChapter) {
            Utils.checkNotNull(nextChapter, "nextChapter");
            this.nextChapter = Optional.ofNullable(nextChapter);
            return this;
        }

        public Builder nextChapter(Optional<? extends List<Long>> nextChapter) {
            Utils.checkNotNull(nextChapter, "nextChapter");
            this.nextChapter = nextChapter;
            return this;
        }
        
        public PassageMeta build() {
            return new PassageMeta(
                canonical,
                chapterStart,
                chapterEnd,
                prevVerse,
                nextVerse,
                prevChapter,
                nextChapter);
        }
    }
}
