/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.github.walker_tx.esv.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.walker_tx.esv.utils.LazySingletonValue;
import io.github.walker_tx.esv.utils.SpeakeasyMetadata;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SearchPassagesRequest {

    /**
     * The text to search for
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    private String query;

    /**
     * Number of results to return per page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page-size")
    private long pageSize;

    /**
     * Page number to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private long page;

    @JsonCreator
    public SearchPassagesRequest(
            String query,
            long pageSize,
            long page) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(page, "page");
        this.query = query;
        this.pageSize = pageSize;
        this.page = page;
    }

    /**
     * The text to search for
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Number of results to return per page
     */
    @JsonIgnore
    public long pageSize() {
        return pageSize;
    }

    /**
     * Page number to return
     */
    @JsonIgnore
    public long page() {
        return page;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The text to search for
     */
    public SearchPassagesRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Number of results to return per page
     */
    public SearchPassagesRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Page number to return
     */
    public SearchPassagesRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchPassagesRequest other = (SearchPassagesRequest) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.page, other.page);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            pageSize,
            page);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchPassagesRequest.class,
                "query", query,
                "pageSize", pageSize,
                "page", page);
    }
    
    public final static class Builder {
 
        private String query;
 
        private Long pageSize;
 
        private Long page;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The text to search for
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Number of results to return per page
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Page number to return
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }
        
        public SearchPassagesRequest build() {
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }            return new SearchPassagesRequest(
                query,
                pageSize,
                page);
        }

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page-size",
                        "20",
                        new TypeReference<Long>() {});

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Long>() {});
    }
}

