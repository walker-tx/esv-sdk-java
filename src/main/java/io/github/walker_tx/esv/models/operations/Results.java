/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.github.walker_tx.esv.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Results {

    /**
     * The passage reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    /**
     * The matching passage content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<String> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verses")
    private Optional<? extends List<Verses>> verses;

    @JsonCreator
    public Results(
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("content") Optional<String> content,
            @JsonProperty("verses") Optional<? extends List<Verses>> verses) {
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(verses, "verses");
        this.reference = reference;
        this.content = content;
        this.verses = verses;
    }
    
    public Results() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The passage reference
     */
    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    /**
     * The matching passage content
     */
    @JsonIgnore
    public Optional<String> content() {
        return content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Verses>> verses() {
        return (Optional<List<Verses>>) verses;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The passage reference
     */
    public Results withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }

    /**
     * The passage reference
     */
    public Results withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The matching passage content
     */
    public Results withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * The matching passage content
     */
    public Results withContent(Optional<String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public Results withVerses(List<Verses> verses) {
        Utils.checkNotNull(verses, "verses");
        this.verses = Optional.ofNullable(verses);
        return this;
    }

    public Results withVerses(Optional<? extends List<Verses>> verses) {
        Utils.checkNotNull(verses, "verses");
        this.verses = verses;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Results other = (Results) o;
        return 
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.verses, other.verses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reference,
            content,
            verses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Results.class,
                "reference", reference,
                "content", content,
                "verses", verses);
    }
    
    public final static class Builder {
 
        private Optional<String> reference = Optional.empty();
 
        private Optional<String> content = Optional.empty();
 
        private Optional<? extends List<Verses>> verses = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The passage reference
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * The passage reference
         */
        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * The matching passage content
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * The matching passage content
         */
        public Builder content(Optional<String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder verses(List<Verses> verses) {
            Utils.checkNotNull(verses, "verses");
            this.verses = Optional.ofNullable(verses);
            return this;
        }

        public Builder verses(Optional<? extends List<Verses>> verses) {
            Utils.checkNotNull(verses, "verses");
            this.verses = verses;
            return this;
        }
        
        public Results build() {
            return new Results(
                reference,
                content,
                verses);
        }
    }
}

