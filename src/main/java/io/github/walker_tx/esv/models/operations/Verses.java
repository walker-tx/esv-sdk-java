/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.github.walker_tx.esv.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Verses {

    /**
     * Verse reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verse")
    private Optional<String> verse;

    /**
     * Verse text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonCreator
    public Verses(
            @JsonProperty("verse") Optional<String> verse,
            @JsonProperty("text") Optional<String> text) {
        Utils.checkNotNull(verse, "verse");
        Utils.checkNotNull(text, "text");
        this.verse = verse;
        this.text = text;
    }
    
    public Verses() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Verse reference
     */
    @JsonIgnore
    public Optional<String> verse() {
        return verse;
    }

    /**
     * Verse text
     */
    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Verse reference
     */
    public Verses withVerse(String verse) {
        Utils.checkNotNull(verse, "verse");
        this.verse = Optional.ofNullable(verse);
        return this;
    }

    /**
     * Verse reference
     */
    public Verses withVerse(Optional<String> verse) {
        Utils.checkNotNull(verse, "verse");
        this.verse = verse;
        return this;
    }

    /**
     * Verse text
     */
    public Verses withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    /**
     * Verse text
     */
    public Verses withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Verses other = (Verses) o;
        return 
            Objects.deepEquals(this.verse, other.verse) &&
            Objects.deepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            verse,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Verses.class,
                "verse", verse,
                "text", text);
    }
    
    public final static class Builder {
 
        private Optional<String> verse = Optional.empty();
 
        private Optional<String> text = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Verse reference
         */
        public Builder verse(String verse) {
            Utils.checkNotNull(verse, "verse");
            this.verse = Optional.ofNullable(verse);
            return this;
        }

        /**
         * Verse reference
         */
        public Builder verse(Optional<String> verse) {
            Utils.checkNotNull(verse, "verse");
            this.verse = verse;
            return this;
        }

        /**
         * Verse text
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * Verse text
         */
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }
        
        public Verses build() {
            return new Verses(
                verse,
                text);
        }
    }
}

