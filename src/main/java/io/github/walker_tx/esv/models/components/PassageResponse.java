/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class PassageResponse {
    /**
     * The passage reference that was requested
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * The canonical version of the passage reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonical")
    private Optional<String> canonical;

    /**
     * Array of parsed passage references
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parsed")
    private Optional<? extends List<List<Long>>> parsed;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passage_meta")
    private Optional<? extends List<PassageMeta>> passageMeta;

    /**
     * Array of formatted passage text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passages")
    private Optional<? extends List<String>> passages;

    @JsonCreator
    public PassageResponse(
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("canonical") Optional<String> canonical,
            @JsonProperty("parsed") Optional<? extends List<List<Long>>> parsed,
            @JsonProperty("passage_meta") Optional<? extends List<PassageMeta>> passageMeta,
            @JsonProperty("passages") Optional<? extends List<String>> passages) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(canonical, "canonical");
        Utils.checkNotNull(parsed, "parsed");
        Utils.checkNotNull(passageMeta, "passageMeta");
        Utils.checkNotNull(passages, "passages");
        this.query = query;
        this.canonical = canonical;
        this.parsed = parsed;
        this.passageMeta = passageMeta;
        this.passages = passages;
    }
    
    public PassageResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The passage reference that was requested
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * The canonical version of the passage reference
     */
    @JsonIgnore
    public Optional<String> canonical() {
        return canonical;
    }

    /**
     * Array of parsed passage references
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<List<Long>>> parsed() {
        return (Optional<List<List<Long>>>) parsed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassageMeta>> passageMeta() {
        return (Optional<List<PassageMeta>>) passageMeta;
    }

    /**
     * Array of formatted passage text
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> passages() {
        return (Optional<List<String>>) passages;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The passage reference that was requested
     */
    public PassageResponse withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * The passage reference that was requested
     */
    public PassageResponse withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * The canonical version of the passage reference
     */
    public PassageResponse withCanonical(String canonical) {
        Utils.checkNotNull(canonical, "canonical");
        this.canonical = Optional.ofNullable(canonical);
        return this;
    }


    /**
     * The canonical version of the passage reference
     */
    public PassageResponse withCanonical(Optional<String> canonical) {
        Utils.checkNotNull(canonical, "canonical");
        this.canonical = canonical;
        return this;
    }

    /**
     * Array of parsed passage references
     */
    public PassageResponse withParsed(List<List<Long>> parsed) {
        Utils.checkNotNull(parsed, "parsed");
        this.parsed = Optional.ofNullable(parsed);
        return this;
    }


    /**
     * Array of parsed passage references
     */
    public PassageResponse withParsed(Optional<? extends List<List<Long>>> parsed) {
        Utils.checkNotNull(parsed, "parsed");
        this.parsed = parsed;
        return this;
    }

    public PassageResponse withPassageMeta(List<PassageMeta> passageMeta) {
        Utils.checkNotNull(passageMeta, "passageMeta");
        this.passageMeta = Optional.ofNullable(passageMeta);
        return this;
    }


    public PassageResponse withPassageMeta(Optional<? extends List<PassageMeta>> passageMeta) {
        Utils.checkNotNull(passageMeta, "passageMeta");
        this.passageMeta = passageMeta;
        return this;
    }

    /**
     * Array of formatted passage text
     */
    public PassageResponse withPassages(List<String> passages) {
        Utils.checkNotNull(passages, "passages");
        this.passages = Optional.ofNullable(passages);
        return this;
    }


    /**
     * Array of formatted passage text
     */
    public PassageResponse withPassages(Optional<? extends List<String>> passages) {
        Utils.checkNotNull(passages, "passages");
        this.passages = passages;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PassageResponse other = (PassageResponse) o;
        return 
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.canonical, other.canonical) &&
            Utils.enhancedDeepEquals(this.parsed, other.parsed) &&
            Utils.enhancedDeepEquals(this.passageMeta, other.passageMeta) &&
            Utils.enhancedDeepEquals(this.passages, other.passages);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            query, canonical, parsed,
            passageMeta, passages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PassageResponse.class,
                "query", query,
                "canonical", canonical,
                "parsed", parsed,
                "passageMeta", passageMeta,
                "passages", passages);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> query = Optional.empty();

        private Optional<String> canonical = Optional.empty();

        private Optional<? extends List<List<Long>>> parsed = Optional.empty();

        private Optional<? extends List<PassageMeta>> passageMeta = Optional.empty();

        private Optional<? extends List<String>> passages = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The passage reference that was requested
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * The passage reference that was requested
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * The canonical version of the passage reference
         */
        public Builder canonical(String canonical) {
            Utils.checkNotNull(canonical, "canonical");
            this.canonical = Optional.ofNullable(canonical);
            return this;
        }

        /**
         * The canonical version of the passage reference
         */
        public Builder canonical(Optional<String> canonical) {
            Utils.checkNotNull(canonical, "canonical");
            this.canonical = canonical;
            return this;
        }


        /**
         * Array of parsed passage references
         */
        public Builder parsed(List<List<Long>> parsed) {
            Utils.checkNotNull(parsed, "parsed");
            this.parsed = Optional.ofNullable(parsed);
            return this;
        }

        /**
         * Array of parsed passage references
         */
        public Builder parsed(Optional<? extends List<List<Long>>> parsed) {
            Utils.checkNotNull(parsed, "parsed");
            this.parsed = parsed;
            return this;
        }


        public Builder passageMeta(List<PassageMeta> passageMeta) {
            Utils.checkNotNull(passageMeta, "passageMeta");
            this.passageMeta = Optional.ofNullable(passageMeta);
            return this;
        }

        public Builder passageMeta(Optional<? extends List<PassageMeta>> passageMeta) {
            Utils.checkNotNull(passageMeta, "passageMeta");
            this.passageMeta = passageMeta;
            return this;
        }


        /**
         * Array of formatted passage text
         */
        public Builder passages(List<String> passages) {
            Utils.checkNotNull(passages, "passages");
            this.passages = Optional.ofNullable(passages);
            return this;
        }

        /**
         * Array of formatted passage text
         */
        public Builder passages(Optional<? extends List<String>> passages) {
            Utils.checkNotNull(passages, "passages");
            this.passages = passages;
            return this;
        }

        public PassageResponse build() {

            return new PassageResponse(
                query, canonical, parsed,
                passageMeta, passages);
        }

    }
}
