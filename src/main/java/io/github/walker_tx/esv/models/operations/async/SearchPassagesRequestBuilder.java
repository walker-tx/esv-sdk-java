/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.operations.async;

import static io.github.walker_tx.esv.operations.Operations.AsyncRequestOperation;
import static io.github.walker_tx.esv.utils.reactive.ReactiveUtils.mapAsync;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.walker_tx.esv.SDKConfiguration;
import io.github.walker_tx.esv.models.operations.SearchPassagesRequest;
import io.github.walker_tx.esv.operations.SearchPassages;
import io.github.walker_tx.esv.utils.Blob;
import io.github.walker_tx.esv.utils.LazySingletonValue;
import io.github.walker_tx.esv.utils.Utils;
import io.github.walker_tx.esv.utils.pagination.AsyncPaginator;
import io.github.walker_tx.esv.utils.pagination.PageTracker;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Flow;
import org.reactivestreams.FlowAdapters;
import org.reactivestreams.Publisher;

public class SearchPassagesRequestBuilder {

    private String query;
    private Long pageSize;
    private Long page;
    private final SDKConfiguration sdkConfiguration;

    public SearchPassagesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public SearchPassagesRequestBuilder query(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public SearchPassagesRequestBuilder pageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public SearchPassagesRequestBuilder page(long page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }


    private SearchPassagesRequest buildRequest() {
        if (pageSize == null) {
            pageSize = _SINGLETON_VALUE_PageSize.value();
        }
        if (page == null) {
            page = _SINGLETON_VALUE_Page.value();
        }

        SearchPassagesRequest request = new SearchPassagesRequest(query,
            pageSize,
            page);

        return request;
    }

    public CompletableFuture<SearchPassagesResponse> call() throws Exception {
        
        AsyncRequestOperation<SearchPassagesRequest, SearchPassagesResponse> operation
              = new SearchPassages.Async(sdkConfiguration);
        SearchPassagesRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    /**
     * Returns a Publisher that performs next page calls till no more pages
     * are returned.
     *
     * <p>The returned publisher can be used with reactive frameworks:
     * <pre><code>
     * Publisher&lt;SearchPassagesResponse&gt; publisher = builder.callAsPublisher();
     * publisher.subscribe(new Subscriber&lt;SearchPassagesResponse&gt;() {
     *     // Handle onNext, onError, onComplete
     * });
     * </code></pre>
     *
     * @return A Publisher that emits pages asynchronously
     */
    public Publisher<SearchPassagesResponse> callAsPublisher() {
        SearchPassagesRequest request = this.buildRequest();
        
        AsyncRequestOperation<SearchPassagesRequest, SearchPassagesResponse> operation
              = new SearchPassages.Async(sdkConfiguration);

        Flow.Publisher<HttpResponse<Blob>> asyncPaginator = new AsyncPaginator<>(
            request,
            new PageTracker<>(
                "$.total_pages",
                Long.class,
                request.page()),
                    SearchPassagesRequest::withPage,
            operation::doRequest);

        Flow.Publisher<SearchPassagesResponse> flowPublisher = mapAsync(asyncPaginator, operation::handleResponse);

        // Convert Flow.Publisher to Reactive Streams Publisher at the last stage
        return FlowAdapters.toPublisher(flowPublisher);
    }


    private static final LazySingletonValue<Long> _SINGLETON_VALUE_PageSize =
            new LazySingletonValue<>(
                    "pageSize",
                    "20",
                    new TypeReference<Long>() {});

    private static final LazySingletonValue<Long> _SINGLETON_VALUE_Page =
            new LazySingletonValue<>(
                    "page",
                    "1",
                    new TypeReference<Long>() {});
}
