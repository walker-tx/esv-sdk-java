/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.operations;

import static io.github.walker_tx.esv.operations.Operations.RequestOperation;
import static io.github.walker_tx.esv.utils.Exceptions.unchecked;
import static io.github.walker_tx.esv.utils.Utils.transform;
import static io.github.walker_tx.esv.utils.Utils.toStream;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.walker_tx.esv.SDKConfiguration;
import io.github.walker_tx.esv.operations.SearchPassagesOperation;
import io.github.walker_tx.esv.utils.LazySingletonValue;
import io.github.walker_tx.esv.utils.Utils;
import io.github.walker_tx.esv.utils.pagination.PageTracker;
import io.github.walker_tx.esv.utils.pagination.Paginator;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Iterable;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Iterator;
import java.util.stream.Stream;

public class SearchPassagesRequestBuilder {

    private String query;
    private Long pageSize;
    private Long page;
    private final SDKConfiguration sdkConfiguration;

    public SearchPassagesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public SearchPassagesRequestBuilder query(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public SearchPassagesRequestBuilder pageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public SearchPassagesRequestBuilder page(long page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }


    private SearchPassagesRequest buildRequest() {
        if (pageSize == null) {
            pageSize = _SINGLETON_VALUE_PageSize.value();
        }
        if (page == null) {
            page = _SINGLETON_VALUE_Page.value();
        }

        SearchPassagesRequest request = new SearchPassagesRequest(query,
            pageSize,
            page);

        return request;
    }

    public SearchPassagesResponse call() throws Exception {
        
        RequestOperation<SearchPassagesRequest, SearchPassagesResponse> operation
              = new SearchPassagesOperation( sdkConfiguration);
        SearchPassagesRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }

    /**
    * Returns an iterable that performs next page calls till no more pages
    * are returned.
    *
    * <p>The returned iterable can be used in a for-each loop:
    * <pre><code>
    * for (SearchPassagesResponse page : builder.callAsIterable()) {
    *     // Process each page
    * }
    * </code></pre>
    * 
    * @return An iterable that can be used to iterate through all pages
    */
    public Iterable<SearchPassagesResponse> callAsIterable() {
        
        RequestOperation<SearchPassagesRequest, SearchPassagesResponse> operation
              = new SearchPassagesOperation( sdkConfiguration);
        SearchPassagesRequest request = buildRequest();
        Iterator<HttpResponse<InputStream>> iterator = new Paginator<>(
            request,
            new PageTracker<>(
                "$.total_pages",
                Long.class,
                request.page()),
                SearchPassagesRequest::withPage,
            nextRequest -> unchecked(() -> operation.doRequest(request)).get());
        
        return () -> transform(iterator, operation::handleResponse);
    }

    /**
     * Returns a stream that performs next page calls till no more pages
     * are returned.
     **/  
    public Stream<SearchPassagesResponse> callAsStream() {
        return toStream(callAsIterable());
    }


    private static final LazySingletonValue<Long> _SINGLETON_VALUE_PageSize =
            new LazySingletonValue<>(
                    "pageSize",
                    "20",
                    new TypeReference<Long>() {});

    private static final LazySingletonValue<Long> _SINGLETON_VALUE_Page =
            new LazySingletonValue<>(
                    "page",
                    "1",
                    new TypeReference<Long>() {});
}
