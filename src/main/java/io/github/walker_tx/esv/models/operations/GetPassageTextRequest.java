/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.walker_tx.esv.utils.LazySingletonValue;
import io.github.walker_tx.esv.utils.SpeakeasyMetadata;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class GetPassageTextRequest {
    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    private String query;

    /**
     * Include passage references before passages
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-passage-references")
    private Optional<Boolean> includePassageReferences;

    /**
     * Include verse numbers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-verse-numbers")
    private Optional<Boolean> includeVerseNumbers;

    /**
     * Include the verse number for the first verse of a chapter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-first-verse-numbers")
    private Optional<Boolean> includeFirstVerseNumbers;

    /**
     * Include callouts to footnotes in the text.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-footnotes")
    private Optional<Boolean> includeFootnotes;

    /**
     * Include footnote body content
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-footnote-body")
    private Optional<Boolean> includeFootnoteBody;

    /**
     * Include passage headings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-headings")
    private Optional<Boolean> includeHeadings;

    /**
     * Include a short copyright notice
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-short-copyright")
    private Optional<Boolean> includeShortCopyright;

    /**
     * Include the full copyright notice
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-copyright")
    private Optional<Boolean> includeCopyright;

    /**
     * Include horizontal lines between passages
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-passage-horizontal-lines")
    private Optional<Boolean> includePassageHorizontalLines;

    /**
     * Include horizontal lines under headings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-heading-horizontal-lines")
    private Optional<Boolean> includeHeadingHorizontalLines;

    /**
     * Length of horizontal lines
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=horizontal-line-length")
    private Optional<Long> horizontalLineLength;

    /**
     * Include "Selah" in passage text
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-selahs")
    private Optional<Boolean> includeSelahs;

    /**
     * Character to use for indentation
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-using")
    private Optional<? extends IndentUsing> indentUsing;

    /**
     * Number of indentation characters for paragraphs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-paragraphs")
    private Optional<Long> indentParagraphs;

    /**
     * Number of indentation characters for poetry
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-poetry")
    private Optional<Long> indentPoetry;

    /**
     * Number of indentation characters for poetry lines
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-poetry-lines")
    private Optional<Long> indentPoetryLines;

    /**
     * Number of indentation characters for declares
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-declares")
    private Optional<Long> indentDeclares;

    /**
     * Number of indentation characters for Psalm doxology
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=indent-psalm-doxology")
    private Optional<Long> indentPsalmDoxology;

    /**
     * Maximum line length
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=line-length")
    private Optional<Long> lineLength;

    @JsonCreator
    public GetPassageTextRequest(
            String query,
            Optional<Boolean> includePassageReferences,
            Optional<Boolean> includeVerseNumbers,
            Optional<Boolean> includeFirstVerseNumbers,
            Optional<Boolean> includeFootnotes,
            Optional<Boolean> includeFootnoteBody,
            Optional<Boolean> includeHeadings,
            Optional<Boolean> includeShortCopyright,
            Optional<Boolean> includeCopyright,
            Optional<Boolean> includePassageHorizontalLines,
            Optional<Boolean> includeHeadingHorizontalLines,
            Optional<Long> horizontalLineLength,
            Optional<Boolean> includeSelahs,
            Optional<? extends IndentUsing> indentUsing,
            Optional<Long> indentParagraphs,
            Optional<Long> indentPoetry,
            Optional<Long> indentPoetryLines,
            Optional<Long> indentDeclares,
            Optional<Long> indentPsalmDoxology,
            Optional<Long> lineLength) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        Utils.checkNotNull(indentUsing, "indentUsing");
        Utils.checkNotNull(indentParagraphs, "indentParagraphs");
        Utils.checkNotNull(indentPoetry, "indentPoetry");
        Utils.checkNotNull(indentPoetryLines, "indentPoetryLines");
        Utils.checkNotNull(indentDeclares, "indentDeclares");
        Utils.checkNotNull(indentPsalmDoxology, "indentPsalmDoxology");
        Utils.checkNotNull(lineLength, "lineLength");
        this.query = query;
        this.includePassageReferences = includePassageReferences;
        this.includeVerseNumbers = includeVerseNumbers;
        this.includeFirstVerseNumbers = includeFirstVerseNumbers;
        this.includeFootnotes = includeFootnotes;
        this.includeFootnoteBody = includeFootnoteBody;
        this.includeHeadings = includeHeadings;
        this.includeShortCopyright = includeShortCopyright;
        this.includeCopyright = includeCopyright;
        this.includePassageHorizontalLines = includePassageHorizontalLines;
        this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
        this.horizontalLineLength = horizontalLineLength;
        this.includeSelahs = includeSelahs;
        this.indentUsing = indentUsing;
        this.indentParagraphs = indentParagraphs;
        this.indentPoetry = indentPoetry;
        this.indentPoetryLines = indentPoetryLines;
        this.indentDeclares = indentDeclares;
        this.indentPsalmDoxology = indentPsalmDoxology;
        this.lineLength = lineLength;
    }
    
    public GetPassageTextRequest(
            String query) {
        this(query, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Include passage references before passages
     */
    @JsonIgnore
    public Optional<Boolean> includePassageReferences() {
        return includePassageReferences;
    }

    /**
     * Include verse numbers
     */
    @JsonIgnore
    public Optional<Boolean> includeVerseNumbers() {
        return includeVerseNumbers;
    }

    /**
     * Include the verse number for the first verse of a chapter
     */
    @JsonIgnore
    public Optional<Boolean> includeFirstVerseNumbers() {
        return includeFirstVerseNumbers;
    }

    /**
     * Include callouts to footnotes in the text.
     */
    @JsonIgnore
    public Optional<Boolean> includeFootnotes() {
        return includeFootnotes;
    }

    /**
     * Include footnote body content
     */
    @JsonIgnore
    public Optional<Boolean> includeFootnoteBody() {
        return includeFootnoteBody;
    }

    /**
     * Include passage headings
     */
    @JsonIgnore
    public Optional<Boolean> includeHeadings() {
        return includeHeadings;
    }

    /**
     * Include a short copyright notice
     */
    @JsonIgnore
    public Optional<Boolean> includeShortCopyright() {
        return includeShortCopyright;
    }

    /**
     * Include the full copyright notice
     */
    @JsonIgnore
    public Optional<Boolean> includeCopyright() {
        return includeCopyright;
    }

    /**
     * Include horizontal lines between passages
     */
    @JsonIgnore
    public Optional<Boolean> includePassageHorizontalLines() {
        return includePassageHorizontalLines;
    }

    /**
     * Include horizontal lines under headings
     */
    @JsonIgnore
    public Optional<Boolean> includeHeadingHorizontalLines() {
        return includeHeadingHorizontalLines;
    }

    /**
     * Length of horizontal lines
     */
    @JsonIgnore
    public Optional<Long> horizontalLineLength() {
        return horizontalLineLength;
    }

    /**
     * Include "Selah" in passage text
     */
    @JsonIgnore
    public Optional<Boolean> includeSelahs() {
        return includeSelahs;
    }

    /**
     * Character to use for indentation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IndentUsing> indentUsing() {
        return (Optional<IndentUsing>) indentUsing;
    }

    /**
     * Number of indentation characters for paragraphs
     */
    @JsonIgnore
    public Optional<Long> indentParagraphs() {
        return indentParagraphs;
    }

    /**
     * Number of indentation characters for poetry
     */
    @JsonIgnore
    public Optional<Long> indentPoetry() {
        return indentPoetry;
    }

    /**
     * Number of indentation characters for poetry lines
     */
    @JsonIgnore
    public Optional<Long> indentPoetryLines() {
        return indentPoetryLines;
    }

    /**
     * Number of indentation characters for declares
     */
    @JsonIgnore
    public Optional<Long> indentDeclares() {
        return indentDeclares;
    }

    /**
     * Number of indentation characters for Psalm doxology
     */
    @JsonIgnore
    public Optional<Long> indentPsalmDoxology() {
        return indentPsalmDoxology;
    }

    /**
     * Maximum line length
     */
    @JsonIgnore
    public Optional<Long> lineLength() {
        return lineLength;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    public GetPassageTextRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Include passage references before passages
     */
    public GetPassageTextRequest withIncludePassageReferences(boolean includePassageReferences) {
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        this.includePassageReferences = Optional.ofNullable(includePassageReferences);
        return this;
    }


    /**
     * Include passage references before passages
     */
    public GetPassageTextRequest withIncludePassageReferences(Optional<Boolean> includePassageReferences) {
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        this.includePassageReferences = includePassageReferences;
        return this;
    }

    /**
     * Include verse numbers
     */
    public GetPassageTextRequest withIncludeVerseNumbers(boolean includeVerseNumbers) {
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        this.includeVerseNumbers = Optional.ofNullable(includeVerseNumbers);
        return this;
    }


    /**
     * Include verse numbers
     */
    public GetPassageTextRequest withIncludeVerseNumbers(Optional<Boolean> includeVerseNumbers) {
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        this.includeVerseNumbers = includeVerseNumbers;
        return this;
    }

    /**
     * Include the verse number for the first verse of a chapter
     */
    public GetPassageTextRequest withIncludeFirstVerseNumbers(boolean includeFirstVerseNumbers) {
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        this.includeFirstVerseNumbers = Optional.ofNullable(includeFirstVerseNumbers);
        return this;
    }


    /**
     * Include the verse number for the first verse of a chapter
     */
    public GetPassageTextRequest withIncludeFirstVerseNumbers(Optional<Boolean> includeFirstVerseNumbers) {
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        this.includeFirstVerseNumbers = includeFirstVerseNumbers;
        return this;
    }

    /**
     * Include callouts to footnotes in the text.
     */
    public GetPassageTextRequest withIncludeFootnotes(boolean includeFootnotes) {
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        this.includeFootnotes = Optional.ofNullable(includeFootnotes);
        return this;
    }


    /**
     * Include callouts to footnotes in the text.
     */
    public GetPassageTextRequest withIncludeFootnotes(Optional<Boolean> includeFootnotes) {
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        this.includeFootnotes = includeFootnotes;
        return this;
    }

    /**
     * Include footnote body content
     */
    public GetPassageTextRequest withIncludeFootnoteBody(boolean includeFootnoteBody) {
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        this.includeFootnoteBody = Optional.ofNullable(includeFootnoteBody);
        return this;
    }


    /**
     * Include footnote body content
     */
    public GetPassageTextRequest withIncludeFootnoteBody(Optional<Boolean> includeFootnoteBody) {
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        this.includeFootnoteBody = includeFootnoteBody;
        return this;
    }

    /**
     * Include passage headings
     */
    public GetPassageTextRequest withIncludeHeadings(boolean includeHeadings) {
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        this.includeHeadings = Optional.ofNullable(includeHeadings);
        return this;
    }


    /**
     * Include passage headings
     */
    public GetPassageTextRequest withIncludeHeadings(Optional<Boolean> includeHeadings) {
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        this.includeHeadings = includeHeadings;
        return this;
    }

    /**
     * Include a short copyright notice
     */
    public GetPassageTextRequest withIncludeShortCopyright(boolean includeShortCopyright) {
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        this.includeShortCopyright = Optional.ofNullable(includeShortCopyright);
        return this;
    }


    /**
     * Include a short copyright notice
     */
    public GetPassageTextRequest withIncludeShortCopyright(Optional<Boolean> includeShortCopyright) {
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        this.includeShortCopyright = includeShortCopyright;
        return this;
    }

    /**
     * Include the full copyright notice
     */
    public GetPassageTextRequest withIncludeCopyright(boolean includeCopyright) {
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        this.includeCopyright = Optional.ofNullable(includeCopyright);
        return this;
    }


    /**
     * Include the full copyright notice
     */
    public GetPassageTextRequest withIncludeCopyright(Optional<Boolean> includeCopyright) {
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        this.includeCopyright = includeCopyright;
        return this;
    }

    /**
     * Include horizontal lines between passages
     */
    public GetPassageTextRequest withIncludePassageHorizontalLines(boolean includePassageHorizontalLines) {
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        this.includePassageHorizontalLines = Optional.ofNullable(includePassageHorizontalLines);
        return this;
    }


    /**
     * Include horizontal lines between passages
     */
    public GetPassageTextRequest withIncludePassageHorizontalLines(Optional<Boolean> includePassageHorizontalLines) {
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        this.includePassageHorizontalLines = includePassageHorizontalLines;
        return this;
    }

    /**
     * Include horizontal lines under headings
     */
    public GetPassageTextRequest withIncludeHeadingHorizontalLines(boolean includeHeadingHorizontalLines) {
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        this.includeHeadingHorizontalLines = Optional.ofNullable(includeHeadingHorizontalLines);
        return this;
    }


    /**
     * Include horizontal lines under headings
     */
    public GetPassageTextRequest withIncludeHeadingHorizontalLines(Optional<Boolean> includeHeadingHorizontalLines) {
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
        return this;
    }

    /**
     * Length of horizontal lines
     */
    public GetPassageTextRequest withHorizontalLineLength(long horizontalLineLength) {
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        this.horizontalLineLength = Optional.ofNullable(horizontalLineLength);
        return this;
    }


    /**
     * Length of horizontal lines
     */
    public GetPassageTextRequest withHorizontalLineLength(Optional<Long> horizontalLineLength) {
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        this.horizontalLineLength = horizontalLineLength;
        return this;
    }

    /**
     * Include "Selah" in passage text
     */
    public GetPassageTextRequest withIncludeSelahs(boolean includeSelahs) {
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        this.includeSelahs = Optional.ofNullable(includeSelahs);
        return this;
    }


    /**
     * Include "Selah" in passage text
     */
    public GetPassageTextRequest withIncludeSelahs(Optional<Boolean> includeSelahs) {
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        this.includeSelahs = includeSelahs;
        return this;
    }

    /**
     * Character to use for indentation
     */
    public GetPassageTextRequest withIndentUsing(IndentUsing indentUsing) {
        Utils.checkNotNull(indentUsing, "indentUsing");
        this.indentUsing = Optional.ofNullable(indentUsing);
        return this;
    }


    /**
     * Character to use for indentation
     */
    public GetPassageTextRequest withIndentUsing(Optional<? extends IndentUsing> indentUsing) {
        Utils.checkNotNull(indentUsing, "indentUsing");
        this.indentUsing = indentUsing;
        return this;
    }

    /**
     * Number of indentation characters for paragraphs
     */
    public GetPassageTextRequest withIndentParagraphs(long indentParagraphs) {
        Utils.checkNotNull(indentParagraphs, "indentParagraphs");
        this.indentParagraphs = Optional.ofNullable(indentParagraphs);
        return this;
    }


    /**
     * Number of indentation characters for paragraphs
     */
    public GetPassageTextRequest withIndentParagraphs(Optional<Long> indentParagraphs) {
        Utils.checkNotNull(indentParagraphs, "indentParagraphs");
        this.indentParagraphs = indentParagraphs;
        return this;
    }

    /**
     * Number of indentation characters for poetry
     */
    public GetPassageTextRequest withIndentPoetry(long indentPoetry) {
        Utils.checkNotNull(indentPoetry, "indentPoetry");
        this.indentPoetry = Optional.ofNullable(indentPoetry);
        return this;
    }


    /**
     * Number of indentation characters for poetry
     */
    public GetPassageTextRequest withIndentPoetry(Optional<Long> indentPoetry) {
        Utils.checkNotNull(indentPoetry, "indentPoetry");
        this.indentPoetry = indentPoetry;
        return this;
    }

    /**
     * Number of indentation characters for poetry lines
     */
    public GetPassageTextRequest withIndentPoetryLines(long indentPoetryLines) {
        Utils.checkNotNull(indentPoetryLines, "indentPoetryLines");
        this.indentPoetryLines = Optional.ofNullable(indentPoetryLines);
        return this;
    }


    /**
     * Number of indentation characters for poetry lines
     */
    public GetPassageTextRequest withIndentPoetryLines(Optional<Long> indentPoetryLines) {
        Utils.checkNotNull(indentPoetryLines, "indentPoetryLines");
        this.indentPoetryLines = indentPoetryLines;
        return this;
    }

    /**
     * Number of indentation characters for declares
     */
    public GetPassageTextRequest withIndentDeclares(long indentDeclares) {
        Utils.checkNotNull(indentDeclares, "indentDeclares");
        this.indentDeclares = Optional.ofNullable(indentDeclares);
        return this;
    }


    /**
     * Number of indentation characters for declares
     */
    public GetPassageTextRequest withIndentDeclares(Optional<Long> indentDeclares) {
        Utils.checkNotNull(indentDeclares, "indentDeclares");
        this.indentDeclares = indentDeclares;
        return this;
    }

    /**
     * Number of indentation characters for Psalm doxology
     */
    public GetPassageTextRequest withIndentPsalmDoxology(long indentPsalmDoxology) {
        Utils.checkNotNull(indentPsalmDoxology, "indentPsalmDoxology");
        this.indentPsalmDoxology = Optional.ofNullable(indentPsalmDoxology);
        return this;
    }


    /**
     * Number of indentation characters for Psalm doxology
     */
    public GetPassageTextRequest withIndentPsalmDoxology(Optional<Long> indentPsalmDoxology) {
        Utils.checkNotNull(indentPsalmDoxology, "indentPsalmDoxology");
        this.indentPsalmDoxology = indentPsalmDoxology;
        return this;
    }

    /**
     * Maximum line length
     */
    public GetPassageTextRequest withLineLength(long lineLength) {
        Utils.checkNotNull(lineLength, "lineLength");
        this.lineLength = Optional.ofNullable(lineLength);
        return this;
    }


    /**
     * Maximum line length
     */
    public GetPassageTextRequest withLineLength(Optional<Long> lineLength) {
        Utils.checkNotNull(lineLength, "lineLength");
        this.lineLength = lineLength;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPassageTextRequest other = (GetPassageTextRequest) o;
        return 
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.includePassageReferences, other.includePassageReferences) &&
            Utils.enhancedDeepEquals(this.includeVerseNumbers, other.includeVerseNumbers) &&
            Utils.enhancedDeepEquals(this.includeFirstVerseNumbers, other.includeFirstVerseNumbers) &&
            Utils.enhancedDeepEquals(this.includeFootnotes, other.includeFootnotes) &&
            Utils.enhancedDeepEquals(this.includeFootnoteBody, other.includeFootnoteBody) &&
            Utils.enhancedDeepEquals(this.includeHeadings, other.includeHeadings) &&
            Utils.enhancedDeepEquals(this.includeShortCopyright, other.includeShortCopyright) &&
            Utils.enhancedDeepEquals(this.includeCopyright, other.includeCopyright) &&
            Utils.enhancedDeepEquals(this.includePassageHorizontalLines, other.includePassageHorizontalLines) &&
            Utils.enhancedDeepEquals(this.includeHeadingHorizontalLines, other.includeHeadingHorizontalLines) &&
            Utils.enhancedDeepEquals(this.horizontalLineLength, other.horizontalLineLength) &&
            Utils.enhancedDeepEquals(this.includeSelahs, other.includeSelahs) &&
            Utils.enhancedDeepEquals(this.indentUsing, other.indentUsing) &&
            Utils.enhancedDeepEquals(this.indentParagraphs, other.indentParagraphs) &&
            Utils.enhancedDeepEquals(this.indentPoetry, other.indentPoetry) &&
            Utils.enhancedDeepEquals(this.indentPoetryLines, other.indentPoetryLines) &&
            Utils.enhancedDeepEquals(this.indentDeclares, other.indentDeclares) &&
            Utils.enhancedDeepEquals(this.indentPsalmDoxology, other.indentPsalmDoxology) &&
            Utils.enhancedDeepEquals(this.lineLength, other.lineLength);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            query, includePassageReferences, includeVerseNumbers,
            includeFirstVerseNumbers, includeFootnotes, includeFootnoteBody,
            includeHeadings, includeShortCopyright, includeCopyright,
            includePassageHorizontalLines, includeHeadingHorizontalLines, horizontalLineLength,
            includeSelahs, indentUsing, indentParagraphs,
            indentPoetry, indentPoetryLines, indentDeclares,
            indentPsalmDoxology, lineLength);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPassageTextRequest.class,
                "query", query,
                "includePassageReferences", includePassageReferences,
                "includeVerseNumbers", includeVerseNumbers,
                "includeFirstVerseNumbers", includeFirstVerseNumbers,
                "includeFootnotes", includeFootnotes,
                "includeFootnoteBody", includeFootnoteBody,
                "includeHeadings", includeHeadings,
                "includeShortCopyright", includeShortCopyright,
                "includeCopyright", includeCopyright,
                "includePassageHorizontalLines", includePassageHorizontalLines,
                "includeHeadingHorizontalLines", includeHeadingHorizontalLines,
                "horizontalLineLength", horizontalLineLength,
                "includeSelahs", includeSelahs,
                "indentUsing", indentUsing,
                "indentParagraphs", indentParagraphs,
                "indentPoetry", indentPoetry,
                "indentPoetryLines", indentPoetryLines,
                "indentDeclares", indentDeclares,
                "indentPsalmDoxology", indentPsalmDoxology,
                "lineLength", lineLength);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String query;

        private Optional<Boolean> includePassageReferences;

        private Optional<Boolean> includeVerseNumbers;

        private Optional<Boolean> includeFirstVerseNumbers;

        private Optional<Boolean> includeFootnotes;

        private Optional<Boolean> includeFootnoteBody;

        private Optional<Boolean> includeHeadings;

        private Optional<Boolean> includeShortCopyright;

        private Optional<Boolean> includeCopyright;

        private Optional<Boolean> includePassageHorizontalLines;

        private Optional<Boolean> includeHeadingHorizontalLines;

        private Optional<Long> horizontalLineLength;

        private Optional<Boolean> includeSelahs;

        private Optional<? extends IndentUsing> indentUsing;

        private Optional<Long> indentParagraphs;

        private Optional<Long> indentPoetry;

        private Optional<Long> indentPoetryLines;

        private Optional<Long> indentDeclares;

        private Optional<Long> indentPsalmDoxology;

        private Optional<Long> lineLength;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Bible passage reference (e.g., "John 3:16" or "43011016")
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Include passage references before passages
         */
        public Builder includePassageReferences(boolean includePassageReferences) {
            Utils.checkNotNull(includePassageReferences, "includePassageReferences");
            this.includePassageReferences = Optional.ofNullable(includePassageReferences);
            return this;
        }

        /**
         * Include passage references before passages
         */
        public Builder includePassageReferences(Optional<Boolean> includePassageReferences) {
            Utils.checkNotNull(includePassageReferences, "includePassageReferences");
            this.includePassageReferences = includePassageReferences;
            return this;
        }


        /**
         * Include verse numbers
         */
        public Builder includeVerseNumbers(boolean includeVerseNumbers) {
            Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
            this.includeVerseNumbers = Optional.ofNullable(includeVerseNumbers);
            return this;
        }

        /**
         * Include verse numbers
         */
        public Builder includeVerseNumbers(Optional<Boolean> includeVerseNumbers) {
            Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
            this.includeVerseNumbers = includeVerseNumbers;
            return this;
        }


        /**
         * Include the verse number for the first verse of a chapter
         */
        public Builder includeFirstVerseNumbers(boolean includeFirstVerseNumbers) {
            Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
            this.includeFirstVerseNumbers = Optional.ofNullable(includeFirstVerseNumbers);
            return this;
        }

        /**
         * Include the verse number for the first verse of a chapter
         */
        public Builder includeFirstVerseNumbers(Optional<Boolean> includeFirstVerseNumbers) {
            Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
            this.includeFirstVerseNumbers = includeFirstVerseNumbers;
            return this;
        }


        /**
         * Include callouts to footnotes in the text.
         */
        public Builder includeFootnotes(boolean includeFootnotes) {
            Utils.checkNotNull(includeFootnotes, "includeFootnotes");
            this.includeFootnotes = Optional.ofNullable(includeFootnotes);
            return this;
        }

        /**
         * Include callouts to footnotes in the text.
         */
        public Builder includeFootnotes(Optional<Boolean> includeFootnotes) {
            Utils.checkNotNull(includeFootnotes, "includeFootnotes");
            this.includeFootnotes = includeFootnotes;
            return this;
        }


        /**
         * Include footnote body content
         */
        public Builder includeFootnoteBody(boolean includeFootnoteBody) {
            Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
            this.includeFootnoteBody = Optional.ofNullable(includeFootnoteBody);
            return this;
        }

        /**
         * Include footnote body content
         */
        public Builder includeFootnoteBody(Optional<Boolean> includeFootnoteBody) {
            Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
            this.includeFootnoteBody = includeFootnoteBody;
            return this;
        }


        /**
         * Include passage headings
         */
        public Builder includeHeadings(boolean includeHeadings) {
            Utils.checkNotNull(includeHeadings, "includeHeadings");
            this.includeHeadings = Optional.ofNullable(includeHeadings);
            return this;
        }

        /**
         * Include passage headings
         */
        public Builder includeHeadings(Optional<Boolean> includeHeadings) {
            Utils.checkNotNull(includeHeadings, "includeHeadings");
            this.includeHeadings = includeHeadings;
            return this;
        }


        /**
         * Include a short copyright notice
         */
        public Builder includeShortCopyright(boolean includeShortCopyright) {
            Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
            this.includeShortCopyright = Optional.ofNullable(includeShortCopyright);
            return this;
        }

        /**
         * Include a short copyright notice
         */
        public Builder includeShortCopyright(Optional<Boolean> includeShortCopyright) {
            Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
            this.includeShortCopyright = includeShortCopyright;
            return this;
        }


        /**
         * Include the full copyright notice
         */
        public Builder includeCopyright(boolean includeCopyright) {
            Utils.checkNotNull(includeCopyright, "includeCopyright");
            this.includeCopyright = Optional.ofNullable(includeCopyright);
            return this;
        }

        /**
         * Include the full copyright notice
         */
        public Builder includeCopyright(Optional<Boolean> includeCopyright) {
            Utils.checkNotNull(includeCopyright, "includeCopyright");
            this.includeCopyright = includeCopyright;
            return this;
        }


        /**
         * Include horizontal lines between passages
         */
        public Builder includePassageHorizontalLines(boolean includePassageHorizontalLines) {
            Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
            this.includePassageHorizontalLines = Optional.ofNullable(includePassageHorizontalLines);
            return this;
        }

        /**
         * Include horizontal lines between passages
         */
        public Builder includePassageHorizontalLines(Optional<Boolean> includePassageHorizontalLines) {
            Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
            this.includePassageHorizontalLines = includePassageHorizontalLines;
            return this;
        }


        /**
         * Include horizontal lines under headings
         */
        public Builder includeHeadingHorizontalLines(boolean includeHeadingHorizontalLines) {
            Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
            this.includeHeadingHorizontalLines = Optional.ofNullable(includeHeadingHorizontalLines);
            return this;
        }

        /**
         * Include horizontal lines under headings
         */
        public Builder includeHeadingHorizontalLines(Optional<Boolean> includeHeadingHorizontalLines) {
            Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
            this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
            return this;
        }


        /**
         * Length of horizontal lines
         */
        public Builder horizontalLineLength(long horizontalLineLength) {
            Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
            this.horizontalLineLength = Optional.ofNullable(horizontalLineLength);
            return this;
        }

        /**
         * Length of horizontal lines
         */
        public Builder horizontalLineLength(Optional<Long> horizontalLineLength) {
            Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
            this.horizontalLineLength = horizontalLineLength;
            return this;
        }


        /**
         * Include "Selah" in passage text
         */
        public Builder includeSelahs(boolean includeSelahs) {
            Utils.checkNotNull(includeSelahs, "includeSelahs");
            this.includeSelahs = Optional.ofNullable(includeSelahs);
            return this;
        }

        /**
         * Include "Selah" in passage text
         */
        public Builder includeSelahs(Optional<Boolean> includeSelahs) {
            Utils.checkNotNull(includeSelahs, "includeSelahs");
            this.includeSelahs = includeSelahs;
            return this;
        }


        /**
         * Character to use for indentation
         */
        public Builder indentUsing(IndentUsing indentUsing) {
            Utils.checkNotNull(indentUsing, "indentUsing");
            this.indentUsing = Optional.ofNullable(indentUsing);
            return this;
        }

        /**
         * Character to use for indentation
         */
        public Builder indentUsing(Optional<? extends IndentUsing> indentUsing) {
            Utils.checkNotNull(indentUsing, "indentUsing");
            this.indentUsing = indentUsing;
            return this;
        }


        /**
         * Number of indentation characters for paragraphs
         */
        public Builder indentParagraphs(long indentParagraphs) {
            Utils.checkNotNull(indentParagraphs, "indentParagraphs");
            this.indentParagraphs = Optional.ofNullable(indentParagraphs);
            return this;
        }

        /**
         * Number of indentation characters for paragraphs
         */
        public Builder indentParagraphs(Optional<Long> indentParagraphs) {
            Utils.checkNotNull(indentParagraphs, "indentParagraphs");
            this.indentParagraphs = indentParagraphs;
            return this;
        }


        /**
         * Number of indentation characters for poetry
         */
        public Builder indentPoetry(long indentPoetry) {
            Utils.checkNotNull(indentPoetry, "indentPoetry");
            this.indentPoetry = Optional.ofNullable(indentPoetry);
            return this;
        }

        /**
         * Number of indentation characters for poetry
         */
        public Builder indentPoetry(Optional<Long> indentPoetry) {
            Utils.checkNotNull(indentPoetry, "indentPoetry");
            this.indentPoetry = indentPoetry;
            return this;
        }


        /**
         * Number of indentation characters for poetry lines
         */
        public Builder indentPoetryLines(long indentPoetryLines) {
            Utils.checkNotNull(indentPoetryLines, "indentPoetryLines");
            this.indentPoetryLines = Optional.ofNullable(indentPoetryLines);
            return this;
        }

        /**
         * Number of indentation characters for poetry lines
         */
        public Builder indentPoetryLines(Optional<Long> indentPoetryLines) {
            Utils.checkNotNull(indentPoetryLines, "indentPoetryLines");
            this.indentPoetryLines = indentPoetryLines;
            return this;
        }


        /**
         * Number of indentation characters for declares
         */
        public Builder indentDeclares(long indentDeclares) {
            Utils.checkNotNull(indentDeclares, "indentDeclares");
            this.indentDeclares = Optional.ofNullable(indentDeclares);
            return this;
        }

        /**
         * Number of indentation characters for declares
         */
        public Builder indentDeclares(Optional<Long> indentDeclares) {
            Utils.checkNotNull(indentDeclares, "indentDeclares");
            this.indentDeclares = indentDeclares;
            return this;
        }


        /**
         * Number of indentation characters for Psalm doxology
         */
        public Builder indentPsalmDoxology(long indentPsalmDoxology) {
            Utils.checkNotNull(indentPsalmDoxology, "indentPsalmDoxology");
            this.indentPsalmDoxology = Optional.ofNullable(indentPsalmDoxology);
            return this;
        }

        /**
         * Number of indentation characters for Psalm doxology
         */
        public Builder indentPsalmDoxology(Optional<Long> indentPsalmDoxology) {
            Utils.checkNotNull(indentPsalmDoxology, "indentPsalmDoxology");
            this.indentPsalmDoxology = indentPsalmDoxology;
            return this;
        }


        /**
         * Maximum line length
         */
        public Builder lineLength(long lineLength) {
            Utils.checkNotNull(lineLength, "lineLength");
            this.lineLength = Optional.ofNullable(lineLength);
            return this;
        }

        /**
         * Maximum line length
         */
        public Builder lineLength(Optional<Long> lineLength) {
            Utils.checkNotNull(lineLength, "lineLength");
            this.lineLength = lineLength;
            return this;
        }

        public GetPassageTextRequest build() {
            if (includePassageReferences == null) {
                includePassageReferences = _SINGLETON_VALUE_IncludePassageReferences.value();
            }
            if (includeVerseNumbers == null) {
                includeVerseNumbers = _SINGLETON_VALUE_IncludeVerseNumbers.value();
            }
            if (includeFirstVerseNumbers == null) {
                includeFirstVerseNumbers = _SINGLETON_VALUE_IncludeFirstVerseNumbers.value();
            }
            if (includeFootnotes == null) {
                includeFootnotes = _SINGLETON_VALUE_IncludeFootnotes.value();
            }
            if (includeFootnoteBody == null) {
                includeFootnoteBody = _SINGLETON_VALUE_IncludeFootnoteBody.value();
            }
            if (includeHeadings == null) {
                includeHeadings = _SINGLETON_VALUE_IncludeHeadings.value();
            }
            if (includeShortCopyright == null) {
                includeShortCopyright = _SINGLETON_VALUE_IncludeShortCopyright.value();
            }
            if (includeCopyright == null) {
                includeCopyright = _SINGLETON_VALUE_IncludeCopyright.value();
            }
            if (includePassageHorizontalLines == null) {
                includePassageHorizontalLines = _SINGLETON_VALUE_IncludePassageHorizontalLines.value();
            }
            if (includeHeadingHorizontalLines == null) {
                includeHeadingHorizontalLines = _SINGLETON_VALUE_IncludeHeadingHorizontalLines.value();
            }
            if (horizontalLineLength == null) {
                horizontalLineLength = _SINGLETON_VALUE_HorizontalLineLength.value();
            }
            if (includeSelahs == null) {
                includeSelahs = _SINGLETON_VALUE_IncludeSelahs.value();
            }
            if (indentUsing == null) {
                indentUsing = _SINGLETON_VALUE_IndentUsing.value();
            }
            if (indentParagraphs == null) {
                indentParagraphs = _SINGLETON_VALUE_IndentParagraphs.value();
            }
            if (indentPoetry == null) {
                indentPoetry = _SINGLETON_VALUE_IndentPoetry.value();
            }
            if (indentPoetryLines == null) {
                indentPoetryLines = _SINGLETON_VALUE_IndentPoetryLines.value();
            }
            if (indentDeclares == null) {
                indentDeclares = _SINGLETON_VALUE_IndentDeclares.value();
            }
            if (indentPsalmDoxology == null) {
                indentPsalmDoxology = _SINGLETON_VALUE_IndentPsalmDoxology.value();
            }
            if (lineLength == null) {
                lineLength = _SINGLETON_VALUE_LineLength.value();
            }

            return new GetPassageTextRequest(
                query, includePassageReferences, includeVerseNumbers,
                includeFirstVerseNumbers, includeFootnotes, includeFootnoteBody,
                includeHeadings, includeShortCopyright, includeCopyright,
                includePassageHorizontalLines, includeHeadingHorizontalLines, horizontalLineLength,
                includeSelahs, indentUsing, indentParagraphs,
                indentPoetry, indentPoetryLines, indentDeclares,
                indentPsalmDoxology, lineLength);
        }


        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludePassageReferences =
                new LazySingletonValue<>(
                        "include-passage-references",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeVerseNumbers =
                new LazySingletonValue<>(
                        "include-verse-numbers",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFirstVerseNumbers =
                new LazySingletonValue<>(
                        "include-first-verse-numbers",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFootnotes =
                new LazySingletonValue<>(
                        "include-footnotes",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFootnoteBody =
                new LazySingletonValue<>(
                        "include-footnote-body",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeHeadings =
                new LazySingletonValue<>(
                        "include-headings",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeShortCopyright =
                new LazySingletonValue<>(
                        "include-short-copyright",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeCopyright =
                new LazySingletonValue<>(
                        "include-copyright",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludePassageHorizontalLines =
                new LazySingletonValue<>(
                        "include-passage-horizontal-lines",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeHeadingHorizontalLines =
                new LazySingletonValue<>(
                        "include-heading-horizontal-lines",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_HorizontalLineLength =
                new LazySingletonValue<>(
                        "horizontal-line-length",
                        "55",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeSelahs =
                new LazySingletonValue<>(
                        "include-selahs",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends IndentUsing>> _SINGLETON_VALUE_IndentUsing =
                new LazySingletonValue<>(
                        "indent-using",
                        "\"space\"",
                        new TypeReference<Optional<? extends IndentUsing>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_IndentParagraphs =
                new LazySingletonValue<>(
                        "indent-paragraphs",
                        "2",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_IndentPoetry =
                new LazySingletonValue<>(
                        "indent-poetry",
                        "2",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_IndentPoetryLines =
                new LazySingletonValue<>(
                        "indent-poetry-lines",
                        "4",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_IndentDeclares =
                new LazySingletonValue<>(
                        "indent-declares",
                        "40",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_IndentPsalmDoxology =
                new LazySingletonValue<>(
                        "indent-psalm-doxology",
                        "30",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_LineLength =
                new LazySingletonValue<>(
                        "line-length",
                        "0",
                        new TypeReference<Optional<Long>>() {});
    }
}
