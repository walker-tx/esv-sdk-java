/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.github.walker_tx.esv.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.walker_tx.esv.utils.LazySingletonValue;
import io.github.walker_tx.esv.utils.SpeakeasyMetadata;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetPassageHtmlRequest {

    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    private String query;

    /**
     * Include passage references before passages
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-passage-references")
    private Optional<Boolean> includePassageReferences;

    /**
     * Include verse numbers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-verse-numbers")
    private Optional<Boolean> includeVerseNumbers;

    /**
     * Include the verse number for the first verse of a chapter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-first-verse-numbers")
    private Optional<Boolean> includeFirstVerseNumbers;

    /**
     * Include callouts to footnotes in the text.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-footnotes")
    private Optional<Boolean> includeFootnotes;

    /**
     * Include footnote body content
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-footnote-body")
    private Optional<Boolean> includeFootnoteBody;

    /**
     * Include passage headings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-headings")
    private Optional<Boolean> includeHeadings;

    /**
     * Include a short copyright notice
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-short-copyright")
    private Optional<Boolean> includeShortCopyright;

    /**
     * Include the full copyright notice
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-copyright")
    private Optional<Boolean> includeCopyright;

    /**
     * Include horizontal lines between passages
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-passage-horizontal-lines")
    private Optional<Boolean> includePassageHorizontalLines;

    /**
     * Include horizontal lines under headings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-heading-horizontal-lines")
    private Optional<Boolean> includeHeadingHorizontalLines;

    /**
     * Length of horizontal lines
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=horizontal-line-length")
    private Optional<Long> horizontalLineLength;

    /**
     * Include "Selah" in passage text
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-selahs")
    private Optional<Boolean> includeSelahs;

    /**
     * Include a link to the ESV API CSS file
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-css-link")
    private Optional<Boolean> includeCssLink;

    /**
     * Include inline styles on HTML elements
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=inline-styles")
    private Optional<Boolean> inlineStyles;

    /**
     * Wrap the HTML output in a div with class="esv"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=wrapping-div")
    private Optional<Boolean> wrappingDiv;

    /**
     * Classes to add to the wrapping div
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=div-classes")
    private Optional<String> divClasses;

    @JsonCreator
    public GetPassageHtmlRequest(
            String query,
            Optional<Boolean> includePassageReferences,
            Optional<Boolean> includeVerseNumbers,
            Optional<Boolean> includeFirstVerseNumbers,
            Optional<Boolean> includeFootnotes,
            Optional<Boolean> includeFootnoteBody,
            Optional<Boolean> includeHeadings,
            Optional<Boolean> includeShortCopyright,
            Optional<Boolean> includeCopyright,
            Optional<Boolean> includePassageHorizontalLines,
            Optional<Boolean> includeHeadingHorizontalLines,
            Optional<Long> horizontalLineLength,
            Optional<Boolean> includeSelahs,
            Optional<Boolean> includeCssLink,
            Optional<Boolean> inlineStyles,
            Optional<Boolean> wrappingDiv,
            Optional<String> divClasses) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        Utils.checkNotNull(includeCssLink, "includeCssLink");
        Utils.checkNotNull(inlineStyles, "inlineStyles");
        Utils.checkNotNull(wrappingDiv, "wrappingDiv");
        Utils.checkNotNull(divClasses, "divClasses");
        this.query = query;
        this.includePassageReferences = includePassageReferences;
        this.includeVerseNumbers = includeVerseNumbers;
        this.includeFirstVerseNumbers = includeFirstVerseNumbers;
        this.includeFootnotes = includeFootnotes;
        this.includeFootnoteBody = includeFootnoteBody;
        this.includeHeadings = includeHeadings;
        this.includeShortCopyright = includeShortCopyright;
        this.includeCopyright = includeCopyright;
        this.includePassageHorizontalLines = includePassageHorizontalLines;
        this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
        this.horizontalLineLength = horizontalLineLength;
        this.includeSelahs = includeSelahs;
        this.includeCssLink = includeCssLink;
        this.inlineStyles = inlineStyles;
        this.wrappingDiv = wrappingDiv;
        this.divClasses = divClasses;
    }
    
    public GetPassageHtmlRequest(
            String query) {
        this(query, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * Include passage references before passages
     */
    @JsonIgnore
    public Optional<Boolean> includePassageReferences() {
        return includePassageReferences;
    }

    /**
     * Include verse numbers
     */
    @JsonIgnore
    public Optional<Boolean> includeVerseNumbers() {
        return includeVerseNumbers;
    }

    /**
     * Include the verse number for the first verse of a chapter
     */
    @JsonIgnore
    public Optional<Boolean> includeFirstVerseNumbers() {
        return includeFirstVerseNumbers;
    }

    /**
     * Include callouts to footnotes in the text.
     */
    @JsonIgnore
    public Optional<Boolean> includeFootnotes() {
        return includeFootnotes;
    }

    /**
     * Include footnote body content
     */
    @JsonIgnore
    public Optional<Boolean> includeFootnoteBody() {
        return includeFootnoteBody;
    }

    /**
     * Include passage headings
     */
    @JsonIgnore
    public Optional<Boolean> includeHeadings() {
        return includeHeadings;
    }

    /**
     * Include a short copyright notice
     */
    @JsonIgnore
    public Optional<Boolean> includeShortCopyright() {
        return includeShortCopyright;
    }

    /**
     * Include the full copyright notice
     */
    @JsonIgnore
    public Optional<Boolean> includeCopyright() {
        return includeCopyright;
    }

    /**
     * Include horizontal lines between passages
     */
    @JsonIgnore
    public Optional<Boolean> includePassageHorizontalLines() {
        return includePassageHorizontalLines;
    }

    /**
     * Include horizontal lines under headings
     */
    @JsonIgnore
    public Optional<Boolean> includeHeadingHorizontalLines() {
        return includeHeadingHorizontalLines;
    }

    /**
     * Length of horizontal lines
     */
    @JsonIgnore
    public Optional<Long> horizontalLineLength() {
        return horizontalLineLength;
    }

    /**
     * Include "Selah" in passage text
     */
    @JsonIgnore
    public Optional<Boolean> includeSelahs() {
        return includeSelahs;
    }

    /**
     * Include a link to the ESV API CSS file
     */
    @JsonIgnore
    public Optional<Boolean> includeCssLink() {
        return includeCssLink;
    }

    /**
     * Include inline styles on HTML elements
     */
    @JsonIgnore
    public Optional<Boolean> inlineStyles() {
        return inlineStyles;
    }

    /**
     * Wrap the HTML output in a div with class="esv"
     */
    @JsonIgnore
    public Optional<Boolean> wrappingDiv() {
        return wrappingDiv;
    }

    /**
     * Classes to add to the wrapping div
     */
    @JsonIgnore
    public Optional<String> divClasses() {
        return divClasses;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Bible passage reference (e.g., "John 3:16" or "43011016")
     */
    public GetPassageHtmlRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Include passage references before passages
     */
    public GetPassageHtmlRequest withIncludePassageReferences(boolean includePassageReferences) {
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        this.includePassageReferences = Optional.ofNullable(includePassageReferences);
        return this;
    }

    /**
     * Include passage references before passages
     */
    public GetPassageHtmlRequest withIncludePassageReferences(Optional<Boolean> includePassageReferences) {
        Utils.checkNotNull(includePassageReferences, "includePassageReferences");
        this.includePassageReferences = includePassageReferences;
        return this;
    }

    /**
     * Include verse numbers
     */
    public GetPassageHtmlRequest withIncludeVerseNumbers(boolean includeVerseNumbers) {
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        this.includeVerseNumbers = Optional.ofNullable(includeVerseNumbers);
        return this;
    }

    /**
     * Include verse numbers
     */
    public GetPassageHtmlRequest withIncludeVerseNumbers(Optional<Boolean> includeVerseNumbers) {
        Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
        this.includeVerseNumbers = includeVerseNumbers;
        return this;
    }

    /**
     * Include the verse number for the first verse of a chapter
     */
    public GetPassageHtmlRequest withIncludeFirstVerseNumbers(boolean includeFirstVerseNumbers) {
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        this.includeFirstVerseNumbers = Optional.ofNullable(includeFirstVerseNumbers);
        return this;
    }

    /**
     * Include the verse number for the first verse of a chapter
     */
    public GetPassageHtmlRequest withIncludeFirstVerseNumbers(Optional<Boolean> includeFirstVerseNumbers) {
        Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
        this.includeFirstVerseNumbers = includeFirstVerseNumbers;
        return this;
    }

    /**
     * Include callouts to footnotes in the text.
     */
    public GetPassageHtmlRequest withIncludeFootnotes(boolean includeFootnotes) {
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        this.includeFootnotes = Optional.ofNullable(includeFootnotes);
        return this;
    }

    /**
     * Include callouts to footnotes in the text.
     */
    public GetPassageHtmlRequest withIncludeFootnotes(Optional<Boolean> includeFootnotes) {
        Utils.checkNotNull(includeFootnotes, "includeFootnotes");
        this.includeFootnotes = includeFootnotes;
        return this;
    }

    /**
     * Include footnote body content
     */
    public GetPassageHtmlRequest withIncludeFootnoteBody(boolean includeFootnoteBody) {
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        this.includeFootnoteBody = Optional.ofNullable(includeFootnoteBody);
        return this;
    }

    /**
     * Include footnote body content
     */
    public GetPassageHtmlRequest withIncludeFootnoteBody(Optional<Boolean> includeFootnoteBody) {
        Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
        this.includeFootnoteBody = includeFootnoteBody;
        return this;
    }

    /**
     * Include passage headings
     */
    public GetPassageHtmlRequest withIncludeHeadings(boolean includeHeadings) {
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        this.includeHeadings = Optional.ofNullable(includeHeadings);
        return this;
    }

    /**
     * Include passage headings
     */
    public GetPassageHtmlRequest withIncludeHeadings(Optional<Boolean> includeHeadings) {
        Utils.checkNotNull(includeHeadings, "includeHeadings");
        this.includeHeadings = includeHeadings;
        return this;
    }

    /**
     * Include a short copyright notice
     */
    public GetPassageHtmlRequest withIncludeShortCopyright(boolean includeShortCopyright) {
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        this.includeShortCopyright = Optional.ofNullable(includeShortCopyright);
        return this;
    }

    /**
     * Include a short copyright notice
     */
    public GetPassageHtmlRequest withIncludeShortCopyright(Optional<Boolean> includeShortCopyright) {
        Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
        this.includeShortCopyright = includeShortCopyright;
        return this;
    }

    /**
     * Include the full copyright notice
     */
    public GetPassageHtmlRequest withIncludeCopyright(boolean includeCopyright) {
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        this.includeCopyright = Optional.ofNullable(includeCopyright);
        return this;
    }

    /**
     * Include the full copyright notice
     */
    public GetPassageHtmlRequest withIncludeCopyright(Optional<Boolean> includeCopyright) {
        Utils.checkNotNull(includeCopyright, "includeCopyright");
        this.includeCopyright = includeCopyright;
        return this;
    }

    /**
     * Include horizontal lines between passages
     */
    public GetPassageHtmlRequest withIncludePassageHorizontalLines(boolean includePassageHorizontalLines) {
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        this.includePassageHorizontalLines = Optional.ofNullable(includePassageHorizontalLines);
        return this;
    }

    /**
     * Include horizontal lines between passages
     */
    public GetPassageHtmlRequest withIncludePassageHorizontalLines(Optional<Boolean> includePassageHorizontalLines) {
        Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
        this.includePassageHorizontalLines = includePassageHorizontalLines;
        return this;
    }

    /**
     * Include horizontal lines under headings
     */
    public GetPassageHtmlRequest withIncludeHeadingHorizontalLines(boolean includeHeadingHorizontalLines) {
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        this.includeHeadingHorizontalLines = Optional.ofNullable(includeHeadingHorizontalLines);
        return this;
    }

    /**
     * Include horizontal lines under headings
     */
    public GetPassageHtmlRequest withIncludeHeadingHorizontalLines(Optional<Boolean> includeHeadingHorizontalLines) {
        Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
        this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
        return this;
    }

    /**
     * Length of horizontal lines
     */
    public GetPassageHtmlRequest withHorizontalLineLength(long horizontalLineLength) {
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        this.horizontalLineLength = Optional.ofNullable(horizontalLineLength);
        return this;
    }

    /**
     * Length of horizontal lines
     */
    public GetPassageHtmlRequest withHorizontalLineLength(Optional<Long> horizontalLineLength) {
        Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
        this.horizontalLineLength = horizontalLineLength;
        return this;
    }

    /**
     * Include "Selah" in passage text
     */
    public GetPassageHtmlRequest withIncludeSelahs(boolean includeSelahs) {
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        this.includeSelahs = Optional.ofNullable(includeSelahs);
        return this;
    }

    /**
     * Include "Selah" in passage text
     */
    public GetPassageHtmlRequest withIncludeSelahs(Optional<Boolean> includeSelahs) {
        Utils.checkNotNull(includeSelahs, "includeSelahs");
        this.includeSelahs = includeSelahs;
        return this;
    }

    /**
     * Include a link to the ESV API CSS file
     */
    public GetPassageHtmlRequest withIncludeCssLink(boolean includeCssLink) {
        Utils.checkNotNull(includeCssLink, "includeCssLink");
        this.includeCssLink = Optional.ofNullable(includeCssLink);
        return this;
    }

    /**
     * Include a link to the ESV API CSS file
     */
    public GetPassageHtmlRequest withIncludeCssLink(Optional<Boolean> includeCssLink) {
        Utils.checkNotNull(includeCssLink, "includeCssLink");
        this.includeCssLink = includeCssLink;
        return this;
    }

    /**
     * Include inline styles on HTML elements
     */
    public GetPassageHtmlRequest withInlineStyles(boolean inlineStyles) {
        Utils.checkNotNull(inlineStyles, "inlineStyles");
        this.inlineStyles = Optional.ofNullable(inlineStyles);
        return this;
    }

    /**
     * Include inline styles on HTML elements
     */
    public GetPassageHtmlRequest withInlineStyles(Optional<Boolean> inlineStyles) {
        Utils.checkNotNull(inlineStyles, "inlineStyles");
        this.inlineStyles = inlineStyles;
        return this;
    }

    /**
     * Wrap the HTML output in a div with class="esv"
     */
    public GetPassageHtmlRequest withWrappingDiv(boolean wrappingDiv) {
        Utils.checkNotNull(wrappingDiv, "wrappingDiv");
        this.wrappingDiv = Optional.ofNullable(wrappingDiv);
        return this;
    }

    /**
     * Wrap the HTML output in a div with class="esv"
     */
    public GetPassageHtmlRequest withWrappingDiv(Optional<Boolean> wrappingDiv) {
        Utils.checkNotNull(wrappingDiv, "wrappingDiv");
        this.wrappingDiv = wrappingDiv;
        return this;
    }

    /**
     * Classes to add to the wrapping div
     */
    public GetPassageHtmlRequest withDivClasses(String divClasses) {
        Utils.checkNotNull(divClasses, "divClasses");
        this.divClasses = Optional.ofNullable(divClasses);
        return this;
    }

    /**
     * Classes to add to the wrapping div
     */
    public GetPassageHtmlRequest withDivClasses(Optional<String> divClasses) {
        Utils.checkNotNull(divClasses, "divClasses");
        this.divClasses = divClasses;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPassageHtmlRequest other = (GetPassageHtmlRequest) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.includePassageReferences, other.includePassageReferences) &&
            Objects.deepEquals(this.includeVerseNumbers, other.includeVerseNumbers) &&
            Objects.deepEquals(this.includeFirstVerseNumbers, other.includeFirstVerseNumbers) &&
            Objects.deepEquals(this.includeFootnotes, other.includeFootnotes) &&
            Objects.deepEquals(this.includeFootnoteBody, other.includeFootnoteBody) &&
            Objects.deepEquals(this.includeHeadings, other.includeHeadings) &&
            Objects.deepEquals(this.includeShortCopyright, other.includeShortCopyright) &&
            Objects.deepEquals(this.includeCopyright, other.includeCopyright) &&
            Objects.deepEquals(this.includePassageHorizontalLines, other.includePassageHorizontalLines) &&
            Objects.deepEquals(this.includeHeadingHorizontalLines, other.includeHeadingHorizontalLines) &&
            Objects.deepEquals(this.horizontalLineLength, other.horizontalLineLength) &&
            Objects.deepEquals(this.includeSelahs, other.includeSelahs) &&
            Objects.deepEquals(this.includeCssLink, other.includeCssLink) &&
            Objects.deepEquals(this.inlineStyles, other.inlineStyles) &&
            Objects.deepEquals(this.wrappingDiv, other.wrappingDiv) &&
            Objects.deepEquals(this.divClasses, other.divClasses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            includePassageReferences,
            includeVerseNumbers,
            includeFirstVerseNumbers,
            includeFootnotes,
            includeFootnoteBody,
            includeHeadings,
            includeShortCopyright,
            includeCopyright,
            includePassageHorizontalLines,
            includeHeadingHorizontalLines,
            horizontalLineLength,
            includeSelahs,
            includeCssLink,
            inlineStyles,
            wrappingDiv,
            divClasses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPassageHtmlRequest.class,
                "query", query,
                "includePassageReferences", includePassageReferences,
                "includeVerseNumbers", includeVerseNumbers,
                "includeFirstVerseNumbers", includeFirstVerseNumbers,
                "includeFootnotes", includeFootnotes,
                "includeFootnoteBody", includeFootnoteBody,
                "includeHeadings", includeHeadings,
                "includeShortCopyright", includeShortCopyright,
                "includeCopyright", includeCopyright,
                "includePassageHorizontalLines", includePassageHorizontalLines,
                "includeHeadingHorizontalLines", includeHeadingHorizontalLines,
                "horizontalLineLength", horizontalLineLength,
                "includeSelahs", includeSelahs,
                "includeCssLink", includeCssLink,
                "inlineStyles", inlineStyles,
                "wrappingDiv", wrappingDiv,
                "divClasses", divClasses);
    }
    
    public final static class Builder {
 
        private String query;
 
        private Optional<Boolean> includePassageReferences;
 
        private Optional<Boolean> includeVerseNumbers;
 
        private Optional<Boolean> includeFirstVerseNumbers;
 
        private Optional<Boolean> includeFootnotes;
 
        private Optional<Boolean> includeFootnoteBody;
 
        private Optional<Boolean> includeHeadings;
 
        private Optional<Boolean> includeShortCopyright;
 
        private Optional<Boolean> includeCopyright;
 
        private Optional<Boolean> includePassageHorizontalLines;
 
        private Optional<Boolean> includeHeadingHorizontalLines;
 
        private Optional<Long> horizontalLineLength;
 
        private Optional<Boolean> includeSelahs;
 
        private Optional<Boolean> includeCssLink;
 
        private Optional<Boolean> inlineStyles;
 
        private Optional<Boolean> wrappingDiv;
 
        private Optional<String> divClasses;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Bible passage reference (e.g., "John 3:16" or "43011016")
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Include passage references before passages
         */
        public Builder includePassageReferences(boolean includePassageReferences) {
            Utils.checkNotNull(includePassageReferences, "includePassageReferences");
            this.includePassageReferences = Optional.ofNullable(includePassageReferences);
            return this;
        }

        /**
         * Include passage references before passages
         */
        public Builder includePassageReferences(Optional<Boolean> includePassageReferences) {
            Utils.checkNotNull(includePassageReferences, "includePassageReferences");
            this.includePassageReferences = includePassageReferences;
            return this;
        }

        /**
         * Include verse numbers
         */
        public Builder includeVerseNumbers(boolean includeVerseNumbers) {
            Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
            this.includeVerseNumbers = Optional.ofNullable(includeVerseNumbers);
            return this;
        }

        /**
         * Include verse numbers
         */
        public Builder includeVerseNumbers(Optional<Boolean> includeVerseNumbers) {
            Utils.checkNotNull(includeVerseNumbers, "includeVerseNumbers");
            this.includeVerseNumbers = includeVerseNumbers;
            return this;
        }

        /**
         * Include the verse number for the first verse of a chapter
         */
        public Builder includeFirstVerseNumbers(boolean includeFirstVerseNumbers) {
            Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
            this.includeFirstVerseNumbers = Optional.ofNullable(includeFirstVerseNumbers);
            return this;
        }

        /**
         * Include the verse number for the first verse of a chapter
         */
        public Builder includeFirstVerseNumbers(Optional<Boolean> includeFirstVerseNumbers) {
            Utils.checkNotNull(includeFirstVerseNumbers, "includeFirstVerseNumbers");
            this.includeFirstVerseNumbers = includeFirstVerseNumbers;
            return this;
        }

        /**
         * Include callouts to footnotes in the text.
         */
        public Builder includeFootnotes(boolean includeFootnotes) {
            Utils.checkNotNull(includeFootnotes, "includeFootnotes");
            this.includeFootnotes = Optional.ofNullable(includeFootnotes);
            return this;
        }

        /**
         * Include callouts to footnotes in the text.
         */
        public Builder includeFootnotes(Optional<Boolean> includeFootnotes) {
            Utils.checkNotNull(includeFootnotes, "includeFootnotes");
            this.includeFootnotes = includeFootnotes;
            return this;
        }

        /**
         * Include footnote body content
         */
        public Builder includeFootnoteBody(boolean includeFootnoteBody) {
            Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
            this.includeFootnoteBody = Optional.ofNullable(includeFootnoteBody);
            return this;
        }

        /**
         * Include footnote body content
         */
        public Builder includeFootnoteBody(Optional<Boolean> includeFootnoteBody) {
            Utils.checkNotNull(includeFootnoteBody, "includeFootnoteBody");
            this.includeFootnoteBody = includeFootnoteBody;
            return this;
        }

        /**
         * Include passage headings
         */
        public Builder includeHeadings(boolean includeHeadings) {
            Utils.checkNotNull(includeHeadings, "includeHeadings");
            this.includeHeadings = Optional.ofNullable(includeHeadings);
            return this;
        }

        /**
         * Include passage headings
         */
        public Builder includeHeadings(Optional<Boolean> includeHeadings) {
            Utils.checkNotNull(includeHeadings, "includeHeadings");
            this.includeHeadings = includeHeadings;
            return this;
        }

        /**
         * Include a short copyright notice
         */
        public Builder includeShortCopyright(boolean includeShortCopyright) {
            Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
            this.includeShortCopyright = Optional.ofNullable(includeShortCopyright);
            return this;
        }

        /**
         * Include a short copyright notice
         */
        public Builder includeShortCopyright(Optional<Boolean> includeShortCopyright) {
            Utils.checkNotNull(includeShortCopyright, "includeShortCopyright");
            this.includeShortCopyright = includeShortCopyright;
            return this;
        }

        /**
         * Include the full copyright notice
         */
        public Builder includeCopyright(boolean includeCopyright) {
            Utils.checkNotNull(includeCopyright, "includeCopyright");
            this.includeCopyright = Optional.ofNullable(includeCopyright);
            return this;
        }

        /**
         * Include the full copyright notice
         */
        public Builder includeCopyright(Optional<Boolean> includeCopyright) {
            Utils.checkNotNull(includeCopyright, "includeCopyright");
            this.includeCopyright = includeCopyright;
            return this;
        }

        /**
         * Include horizontal lines between passages
         */
        public Builder includePassageHorizontalLines(boolean includePassageHorizontalLines) {
            Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
            this.includePassageHorizontalLines = Optional.ofNullable(includePassageHorizontalLines);
            return this;
        }

        /**
         * Include horizontal lines between passages
         */
        public Builder includePassageHorizontalLines(Optional<Boolean> includePassageHorizontalLines) {
            Utils.checkNotNull(includePassageHorizontalLines, "includePassageHorizontalLines");
            this.includePassageHorizontalLines = includePassageHorizontalLines;
            return this;
        }

        /**
         * Include horizontal lines under headings
         */
        public Builder includeHeadingHorizontalLines(boolean includeHeadingHorizontalLines) {
            Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
            this.includeHeadingHorizontalLines = Optional.ofNullable(includeHeadingHorizontalLines);
            return this;
        }

        /**
         * Include horizontal lines under headings
         */
        public Builder includeHeadingHorizontalLines(Optional<Boolean> includeHeadingHorizontalLines) {
            Utils.checkNotNull(includeHeadingHorizontalLines, "includeHeadingHorizontalLines");
            this.includeHeadingHorizontalLines = includeHeadingHorizontalLines;
            return this;
        }

        /**
         * Length of horizontal lines
         */
        public Builder horizontalLineLength(long horizontalLineLength) {
            Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
            this.horizontalLineLength = Optional.ofNullable(horizontalLineLength);
            return this;
        }

        /**
         * Length of horizontal lines
         */
        public Builder horizontalLineLength(Optional<Long> horizontalLineLength) {
            Utils.checkNotNull(horizontalLineLength, "horizontalLineLength");
            this.horizontalLineLength = horizontalLineLength;
            return this;
        }

        /**
         * Include "Selah" in passage text
         */
        public Builder includeSelahs(boolean includeSelahs) {
            Utils.checkNotNull(includeSelahs, "includeSelahs");
            this.includeSelahs = Optional.ofNullable(includeSelahs);
            return this;
        }

        /**
         * Include "Selah" in passage text
         */
        public Builder includeSelahs(Optional<Boolean> includeSelahs) {
            Utils.checkNotNull(includeSelahs, "includeSelahs");
            this.includeSelahs = includeSelahs;
            return this;
        }

        /**
         * Include a link to the ESV API CSS file
         */
        public Builder includeCssLink(boolean includeCssLink) {
            Utils.checkNotNull(includeCssLink, "includeCssLink");
            this.includeCssLink = Optional.ofNullable(includeCssLink);
            return this;
        }

        /**
         * Include a link to the ESV API CSS file
         */
        public Builder includeCssLink(Optional<Boolean> includeCssLink) {
            Utils.checkNotNull(includeCssLink, "includeCssLink");
            this.includeCssLink = includeCssLink;
            return this;
        }

        /**
         * Include inline styles on HTML elements
         */
        public Builder inlineStyles(boolean inlineStyles) {
            Utils.checkNotNull(inlineStyles, "inlineStyles");
            this.inlineStyles = Optional.ofNullable(inlineStyles);
            return this;
        }

        /**
         * Include inline styles on HTML elements
         */
        public Builder inlineStyles(Optional<Boolean> inlineStyles) {
            Utils.checkNotNull(inlineStyles, "inlineStyles");
            this.inlineStyles = inlineStyles;
            return this;
        }

        /**
         * Wrap the HTML output in a div with class="esv"
         */
        public Builder wrappingDiv(boolean wrappingDiv) {
            Utils.checkNotNull(wrappingDiv, "wrappingDiv");
            this.wrappingDiv = Optional.ofNullable(wrappingDiv);
            return this;
        }

        /**
         * Wrap the HTML output in a div with class="esv"
         */
        public Builder wrappingDiv(Optional<Boolean> wrappingDiv) {
            Utils.checkNotNull(wrappingDiv, "wrappingDiv");
            this.wrappingDiv = wrappingDiv;
            return this;
        }

        /**
         * Classes to add to the wrapping div
         */
        public Builder divClasses(String divClasses) {
            Utils.checkNotNull(divClasses, "divClasses");
            this.divClasses = Optional.ofNullable(divClasses);
            return this;
        }

        /**
         * Classes to add to the wrapping div
         */
        public Builder divClasses(Optional<String> divClasses) {
            Utils.checkNotNull(divClasses, "divClasses");
            this.divClasses = divClasses;
            return this;
        }
        
        public GetPassageHtmlRequest build() {
            if (includePassageReferences == null) {
                includePassageReferences = _SINGLETON_VALUE_IncludePassageReferences.value();
            }
            if (includeVerseNumbers == null) {
                includeVerseNumbers = _SINGLETON_VALUE_IncludeVerseNumbers.value();
            }
            if (includeFirstVerseNumbers == null) {
                includeFirstVerseNumbers = _SINGLETON_VALUE_IncludeFirstVerseNumbers.value();
            }
            if (includeFootnotes == null) {
                includeFootnotes = _SINGLETON_VALUE_IncludeFootnotes.value();
            }
            if (includeFootnoteBody == null) {
                includeFootnoteBody = _SINGLETON_VALUE_IncludeFootnoteBody.value();
            }
            if (includeHeadings == null) {
                includeHeadings = _SINGLETON_VALUE_IncludeHeadings.value();
            }
            if (includeShortCopyright == null) {
                includeShortCopyright = _SINGLETON_VALUE_IncludeShortCopyright.value();
            }
            if (includeCopyright == null) {
                includeCopyright = _SINGLETON_VALUE_IncludeCopyright.value();
            }
            if (includePassageHorizontalLines == null) {
                includePassageHorizontalLines = _SINGLETON_VALUE_IncludePassageHorizontalLines.value();
            }
            if (includeHeadingHorizontalLines == null) {
                includeHeadingHorizontalLines = _SINGLETON_VALUE_IncludeHeadingHorizontalLines.value();
            }
            if (horizontalLineLength == null) {
                horizontalLineLength = _SINGLETON_VALUE_HorizontalLineLength.value();
            }
            if (includeSelahs == null) {
                includeSelahs = _SINGLETON_VALUE_IncludeSelahs.value();
            }
            if (includeCssLink == null) {
                includeCssLink = _SINGLETON_VALUE_IncludeCssLink.value();
            }
            if (inlineStyles == null) {
                inlineStyles = _SINGLETON_VALUE_InlineStyles.value();
            }
            if (wrappingDiv == null) {
                wrappingDiv = _SINGLETON_VALUE_WrappingDiv.value();
            }
            if (divClasses == null) {
                divClasses = _SINGLETON_VALUE_DivClasses.value();
            }
            return new GetPassageHtmlRequest(
                query,
                includePassageReferences,
                includeVerseNumbers,
                includeFirstVerseNumbers,
                includeFootnotes,
                includeFootnoteBody,
                includeHeadings,
                includeShortCopyright,
                includeCopyright,
                includePassageHorizontalLines,
                includeHeadingHorizontalLines,
                horizontalLineLength,
                includeSelahs,
                includeCssLink,
                inlineStyles,
                wrappingDiv,
                divClasses);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludePassageReferences =
                new LazySingletonValue<>(
                        "include-passage-references",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeVerseNumbers =
                new LazySingletonValue<>(
                        "include-verse-numbers",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFirstVerseNumbers =
                new LazySingletonValue<>(
                        "include-first-verse-numbers",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFootnotes =
                new LazySingletonValue<>(
                        "include-footnotes",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeFootnoteBody =
                new LazySingletonValue<>(
                        "include-footnote-body",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeHeadings =
                new LazySingletonValue<>(
                        "include-headings",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeShortCopyright =
                new LazySingletonValue<>(
                        "include-short-copyright",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeCopyright =
                new LazySingletonValue<>(
                        "include-copyright",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludePassageHorizontalLines =
                new LazySingletonValue<>(
                        "include-passage-horizontal-lines",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeHeadingHorizontalLines =
                new LazySingletonValue<>(
                        "include-heading-horizontal-lines",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_HorizontalLineLength =
                new LazySingletonValue<>(
                        "horizontal-line-length",
                        "55",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeSelahs =
                new LazySingletonValue<>(
                        "include-selahs",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeCssLink =
                new LazySingletonValue<>(
                        "include-css-link",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_InlineStyles =
                new LazySingletonValue<>(
                        "inline-styles",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_WrappingDiv =
                new LazySingletonValue<>(
                        "wrapping-div",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_DivClasses =
                new LazySingletonValue<>(
                        "div-classes",
                        "\"esv\"",
                        new TypeReference<Optional<String>>() {});
    }
}
