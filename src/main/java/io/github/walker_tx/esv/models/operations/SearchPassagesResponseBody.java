/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package io.github.walker_tx.esv.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.walker_tx.esv.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * SearchPassagesResponseBody - Successful response
 */

public class SearchPassagesResponseBody {

    /**
     * Current page number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    private Optional<Long> page;

    /**
     * Total number of pages
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_pages")
    private Optional<Long> totalPages;

    /**
     * Total number of results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_results")
    private Optional<Long> totalResults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<Results>> results;

    @JsonCreator
    public SearchPassagesResponseBody(
            @JsonProperty("page") Optional<Long> page,
            @JsonProperty("total_pages") Optional<Long> totalPages,
            @JsonProperty("total_results") Optional<Long> totalResults,
            @JsonProperty("results") Optional<? extends List<Results>> results) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(totalPages, "totalPages");
        Utils.checkNotNull(totalResults, "totalResults");
        Utils.checkNotNull(results, "results");
        this.page = page;
        this.totalPages = totalPages;
        this.totalResults = totalResults;
        this.results = results;
    }
    
    public SearchPassagesResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Current page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Total number of pages
     */
    @JsonIgnore
    public Optional<Long> totalPages() {
        return totalPages;
    }

    /**
     * Total number of results
     */
    @JsonIgnore
    public Optional<Long> totalResults() {
        return totalResults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Results>> results() {
        return (Optional<List<Results>>) results;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Current page number
     */
    public SearchPassagesResponseBody withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Current page number
     */
    public SearchPassagesResponseBody withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Total number of pages
     */
    public SearchPassagesResponseBody withTotalPages(long totalPages) {
        Utils.checkNotNull(totalPages, "totalPages");
        this.totalPages = Optional.ofNullable(totalPages);
        return this;
    }

    /**
     * Total number of pages
     */
    public SearchPassagesResponseBody withTotalPages(Optional<Long> totalPages) {
        Utils.checkNotNull(totalPages, "totalPages");
        this.totalPages = totalPages;
        return this;
    }

    /**
     * Total number of results
     */
    public SearchPassagesResponseBody withTotalResults(long totalResults) {
        Utils.checkNotNull(totalResults, "totalResults");
        this.totalResults = Optional.ofNullable(totalResults);
        return this;
    }

    /**
     * Total number of results
     */
    public SearchPassagesResponseBody withTotalResults(Optional<Long> totalResults) {
        Utils.checkNotNull(totalResults, "totalResults");
        this.totalResults = totalResults;
        return this;
    }

    public SearchPassagesResponseBody withResults(List<Results> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public SearchPassagesResponseBody withResults(Optional<? extends List<Results>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchPassagesResponseBody other = (SearchPassagesResponseBody) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.totalPages, other.totalPages) &&
            Objects.deepEquals(this.totalResults, other.totalResults) &&
            Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            totalPages,
            totalResults,
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchPassagesResponseBody.class,
                "page", page,
                "totalPages", totalPages,
                "totalResults", totalResults,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> totalPages = Optional.empty();
 
        private Optional<Long> totalResults = Optional.empty();
 
        private Optional<? extends List<Results>> results = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Current page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Current page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Total number of pages
         */
        public Builder totalPages(long totalPages) {
            Utils.checkNotNull(totalPages, "totalPages");
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        /**
         * Total number of pages
         */
        public Builder totalPages(Optional<Long> totalPages) {
            Utils.checkNotNull(totalPages, "totalPages");
            this.totalPages = totalPages;
            return this;
        }

        /**
         * Total number of results
         */
        public Builder totalResults(long totalResults) {
            Utils.checkNotNull(totalResults, "totalResults");
            this.totalResults = Optional.ofNullable(totalResults);
            return this;
        }

        /**
         * Total number of results
         */
        public Builder totalResults(Optional<Long> totalResults) {
            Utils.checkNotNull(totalResults, "totalResults");
            this.totalResults = totalResults;
            return this;
        }

        public Builder results(List<Results> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<Results>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public SearchPassagesResponseBody build() {
            return new SearchPassagesResponseBody(
                page,
                totalPages,
                totalResults,
                results);
        }
    }
}

